<!DOCTYPE html>
<html>
  <head>
    <title><%= title %></title>
    <link rel='stylesheet' href='/stylesheets/style.css' />
  </head>
  <body>

    <h1><%= title %></h1>

    <div style="width:40%; float:left;">
    <% if(files.length > 0){ %>
      <% files.forEach(function(file) { %>
        <p>
          <a href="<%= file %>" target="_blank"><%= file %></a>
          <button onclick="deleteJsonButton(event);" style="color:red; float:right;">Delete</button>
          <button onclick="showJsonButton(event);" style="float:right;">ShowJson</button>
        </p>
      <% }); %>
    <% } %>
  </div>

  <div style="width:40%; height:100%; position:fixed; right:50px;">
      <input type="text" id="input_json_url" style="width:50%; height:20px;"></input>
      <button onclick="addJsonButton(event);" style="color:blue; font-size: 13px;">Add</button>
      <div id="jsoneditor" style="width:100%; height:60%; margin-top:20px;"></div>
      <button onclick="validateJsonButton(event);" style="float: right; font-size: 20px;">Validate</button>
      <span id="span_validate_result"style="width:100%; word-wrap:break-word; margin-top:10px;"></span>
  </div>


  </body>

  <link href="/jsoneditor/dist/jsoneditor.min.css" rel="stylesheet" type="text/css">
  <script src="/jsoneditor/dist/jsoneditor.min.js"></script>
  <script>
    var _spanValidateResultEl = document.getElementById('span_validate_result');
    var _inputJsonUrlEl       = document.getElementById('input_json_url');
    var jsonEditorMode        = ['code' /*, 'text'*/ , 'tree' /*, 'view'*/ /*, 'form'*/];
    var container             = document.getElementById("jsoneditor");
    var options               = {
                                  modes : jsonEditorMode,
                                  onError : onError,
                                  onModeChange : onModeChange
                                };
    var editor                = new JSONEditor(container, options);

    function onError(error) {
      errorValidateResult(error);
    }

    function onModeChange(newMode, oldMode) {
      jsonEditorExpandAll(newMode);
    }

    function jsonEditorExpandAll(mode) {
      if (mode == 'tree')
        editor.expandAll();
    }

    function showJsonButton(e) {
      var target      = e.target;
      var aTagEl      = target.previousElementSibling.previousElementSibling;
      var requestUrl  = aTagEl.text;
      //console.log(requestUrl);

      requestXhttp(requestUrl, "GET", null, function(jsonString) {
        var json = JSON.parse(jsonString);

        _inputJsonUrlEl.value = aTagEl.text;
        editor.set(json);
        jsonEditorExpandAll(editor.getMode());
      });
    }

    function deleteJsonButton(e) {
      var target      = e.target;
      var aTagEl      = target.previousElementSibling;
      var requestUrl  = aTagEl.text;
      //console.log(requestUrl);

      if (confirm(requestUrl + " 항목을 삭제하시겠습니까?")) {
        requestXhttp(requestUrl, "DELETE", null, function(data) {
          location.reload();
        });
      }
    }

    function addJsonButton(e) {
      var target      = e.target;
      var inputTagEl  = target.previousElementSibling;
      var requestUrl  = inputTagEl.value;
      var jsonString  = editor.getText();
      // console.log(requestUrl);

      requestXhttp(requestUrl, "POST", jsonString,
      function(data) {
        location.reload();
      },
      function(error) {
        errorValidateResult(error);
      });
    }

    function validateJsonButton(e) {
      try {
        var json             = editor.get();
        var prettyJsonString = JSON.stringify(json, undefined, 4);

        editor.set(JSON.parse(prettyJsonString));
        jsonEditorExpandAll(editor.getMode());
        successValidateResult();
      } catch(error) {
        errorValidateResult(error);
      }
    }

    function successValidateResult() {
      _spanValidateResultEl.style.color   = '#0a5';
      _spanValidateResultEl.innerHTML     = 'Success Validation!';
    }
    function errorValidateResult(validateResult) {
      _spanValidateResultEl.style.color   = '#f00';
      _spanValidateResultEl.innerHTML     = validateResult;
    }

    function requestXhttp(url, method, data, successCallback, errorCallback) {
      var xhttp = new XMLHttpRequest();
      xhttp.onreadystatechange = function() {
        if (this.readyState == 4 && this.status == 200) {
          if (successCallback) {
            successCallback(this.responseText);
          }
        } else if (this.readyState == 4 && this.status != 200) {
          if (errorCallback) {
            errorCallback(this.responseText);
          } else {
            // console.log(this);
            alert("Server Error : " + this.responseText);
          }
        }
      };
      xhttp.open(method, url, true);
      xhttp.setRequestHeader("Content-type", "application/json");
      xhttp.send(data);
    }
  </script>
</html>
